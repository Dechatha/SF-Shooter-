// Setup scene, camera, and renderer
const scene = new THREE.Scene();
const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
const renderer = new THREE.WebGLRenderer();
renderer.setSize(window.innerWidth, window.innerHeight);
document.body.appendChild(renderer.domElement);

// Add a cube as a target
const geometry = new THREE.BoxGeometry(1, 1, 1);
const material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });
const target = new THREE.Mesh(geometry, material);
target.position.set(0, 0, -5);  // Position it in front of the camera
scene.add(target);

// Setup the camera position
camera.position.z = 5;

// Add lighting
const light = new THREE.PointLight(0xFFFFFF, 1, 100);
light.position.set(10, 10, 10);
scene.add(light);

// Set up basic controls (simple movement)
let moveForward = false;
let moveBackward = false;
let shoot = false;

document.addEventListener("keydown", (event) => {
    if (event.key === "w") moveForward = true;
    if (event.key === "s") moveBackward = true;
    if (event.key === " ") shoot = true;
});

document.addEventListener("keyup", (event) => {
    if (event.key === "w") moveForward = false;
    if (event.key === "s") moveBackward = false;
    if (event.key === " ") shoot = false;
});

// Create a bullet and manage shooting
const bulletGeometry = new THREE.SphereGeometry(0.1, 16, 16);
const bulletMaterial = new THREE.MeshBasicMaterial({ color: 0xff0000 });
let bullets = [];

function shootBullet() {
    const bullet = new THREE.Mesh(bulletGeometry, bulletMaterial);
    bullet.position.set(camera.position.x, camera.position.y, camera.position.z);
    scene.add(bullet);
    bullets.push(bullet);
}

// Update the game world
function animate() {
    requestAnimationFrame(animate);

    // Camera movement
    if (moveForward) camera.position.z -= 0.1;
    if (moveBackward) camera.position.z += 0.1;

    // Shoot bullets when spacebar is pressed
    if (shoot) shootBullet();

    // Move bullets forward
    bullets.forEach((bullet, index) => {
        bullet.position.z -= 0.5;

        // Check for bullet collision with the target
        if (bullet.position.distanceTo(target.position) < 1) {
            console.log('Hit!');
            scene.remove(bullet);
            bullets.splice(index, 1);
            target.material.color.set(0xff0000); // Change target color to red on hit
        }

        // Remove bullet if it goes off-screen
        if (bullet.position.z < -10) {
            scene.remove(bullet);
            bullets.splice(index, 1);
        }
    });

    // Move the target (simple motion to test)
    target.position.x = Math.sin(Date.now() * 0.001) * 3;
    target.position.y = Math.cos(Date.now() * 0.001) * 3;

    renderer.render(scene, camera);
}

animate();